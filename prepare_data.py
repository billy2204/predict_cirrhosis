import os
import cv2
import numpy as np
from pathlib import Path
from tqdm import tqdm

# --- C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n g·ªëc ---
ROOT_DIR = Path(r"C:\Users\Billy\Downloads\CirrMRI600+\Cirrhosis_T2_2D\Cirrhosis_T2_2D")  # th∆∞ m·ª•c g·ªëc ch·ª©a train/test/valid
OUTPUT_DIR = Path(r"C:\Users\Billy\OneDrive\Documents\project_BME\yolo_dataset")   # n∆°i xu·∫•t dataset YOLO
os.makedirs(OUTPUT_DIR, exist_ok=True)

# C√°c split
SPLITS = ["train", "valid", "test"]
# T√™n l·ªõp (·ªü ƒë√¢y ch·ªâ 1 l·ªõp: b·∫•t th∆∞·ªùng gan)
NAMES = ["abnormal_liver"]

# T·∫°o c·∫•u tr√∫c folder cho YOLO
for split in SPLITS:
    (OUTPUT_DIR / "images" / split).mkdir(parents=True, exist_ok=True)
    (OUTPUT_DIR / "labels" / split).mkdir(parents=True, exist_ok=True)

# H√†m t√≠nh bounding box t·ª´ mask
def mask_to_yolo_boxes(mask_path):
    mask = cv2.imread(str(mask_path), cv2.IMREAD_GRAYSCALE)
    h, w = mask.shape
    ys, xs = np.where(mask > 0)
    if ys.size == 0:
        return []
    x_min, x_max = xs.min(), xs.max()
    y_min, y_max = ys.min(), ys.max()
    box_w = x_max - x_min
    box_h = y_max - y_min
    x_center = x_min + box_w / 2
    y_center = y_min + box_h / 2
    x_c = x_center / w
    y_c = y_center / h
    bw = box_w / w
    bh = box_h / h
    return [(0, x_c, y_c, bw, bh)]

# X·ª≠ l√Ω v·ªõi b√°o ti·∫øn tr√¨nh
for split in SPLITS:
    src_split = ROOT_DIR / split
    if not src_split.exists():
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {src_split}")
    vols = [d for d in src_split.iterdir() if d.is_dir()]
    print(f"Processing split '{split}' with {len(vols)} volumes...")
    for vol in tqdm(vols, desc=f"Volumes ({split})"):
        img_dir = vol / "images"
        mask_dir = vol / "masks"
        img_files = list(img_dir.glob("*.png"))
        for img_path in tqdm(img_files, desc=f"Slices ({vol.name})", leave=False):
            name = img_path.stem
            mask_path = mask_dir / f"{name}.png"
            # copy ·∫£nh sang th∆∞ m·ª•c m·ªõi
            dst_img = OUTPUT_DIR / "images" / split / f"{vol.name}_{name}.png"
            cv2.imwrite(str(dst_img), cv2.imread(str(img_path)))
            # t√≠nh bbox v√† ghi label
            boxes = mask_to_yolo_boxes(mask_path) if mask_path.exists() else []
            dst_lbl = OUTPUT_DIR / "labels" / split / f"{vol.name}_{name}.txt"
            with open(dst_lbl, 'w') as f:
                for cls, x_c, y_c, bw, bh in boxes:
                    f.write(f"{cls} {x_c:.6f} {y_c:.6f} {bw:.6f} {bh:.6f}\n")
print("üéâ ƒê√£ chuy·ªÉn ƒë·ªïi xong dataset sang ƒë·ªãnh d·∫°ng YOLO t·∫°i:", OUTPUT_DIR)
